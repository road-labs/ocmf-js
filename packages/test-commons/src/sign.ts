import {
  Curve,
  decodePkixEcdsaSigValue,
  Hash,
  PkixEcdsaSigValue,
} from '@road-labs/ocmf-crypto';
import { hexToBytes, stringToBytes } from './utils';

const testCases: {
  name: string;
  curve: Curve;
  pkcs8: string;
}[] = [
  {
    name: 'basic brainpool256r1',
    curve: 'brainpool256r1',
    pkcs8:
      '308195020100301406072A8648CE3D020106092B2403030208010107047A307802010104203AF0C268FD81B7E89508F6CC48C2EF945459436133640648A678016C83ECD8B3A00B06092B2403030208010107A1440342000469C661761E9D9A110AEE98614E1872792FB3F02EFD6BA5281AEED04F190374B725606605EB86F5BC57BAF72CDBAC442C48F534E7EC51F36DBEBDF55A139A311D',
  },
  {
    name: 'basic brainpool384r1',
    curve: 'brainpool384r1',
    pkcs8:
      '3081C7020100301406072A8648CE3D020106092B240303020801010B0481AB3081A802010104304CC8EB281384B0D980E5E8E7DED1D073244344AA5810D15C062F713059ADAE638B7AF9D57441EDF7A02676878BAFE055A00B06092B240303020801010BA16403620004640466CC299698E2349063BE542B25C2CC59534B4299E36438F15FA811E7ADF02AF57F854EFF06DE9AA89DE1667091B727CB8C2067A5BB463789175B152E5C032E38E0E61C04DF0AAB11B5BC2D0950513FDA4D201BCC9747D19EF290D57C40B7',
  },
  {
    name: 'basic secp192r1',
    curve: 'secp192r1',
    pkcs8:
      '3075020100301006072A8648CE3D020106052B8104001F045E305C02010104187AA2902F15D10F5D2BF47CEAE19677F6EE44E05FAF155BA4A00706052B8104001FA134033200041D13138B8BE0365FF04D93484CF801BCAB219D37E3D92763A03E8CEF934E47EE8E3CB083FACD2E6F92BE6BD7EE51043E',
  },
  {
    name: 'basic secp192k1',
    curve: 'secp192k1',
    pkcs8:
      '307B020100301306072A8648CE3D020106082A8648CE3D0301010461305F02010104186EC475D878A8057D4D2A0C4C709EB7C9FD77ADEFB267DFCDA00A06082A8648CE3D030101A1340332000409937051869B2F02A0162DB8C57303B11935A540060F99626C6D85BD908058D4EC2CC3A6ECDEC78633D838E1EFE0A0B6',
  },
  {
    name: 'basic secp256k1',
    curve: 'secp256k1',
    pkcs8:
      '30818D020100301006072A8648CE3D020106052B8104000A0476307402010104209717E7C65EB836E8C7F93F8DD8A0F0BB9100C0EF26663A1055A4AC5D7A08FFB1A00706052B8104000AA14403420004C89F37EE39862217A7D6FBC41E3CC2EF005BCAEDE815D4488CA0ABEFEDE69D34BDA4776DD7F25C7FBAE96C0E29877AEB52FB4132658D79C673B91E5F5D0B675F',
  },
  {
    name: 'basic secp256r1',
    curve: 'secp256r1',
    pkcs8:
      '308193020100301306072A8648CE3D020106082A8648CE3D0301070479307702010104207C6D5BE11771D1A54976443488A02F1796C6BFFA8FE76DA83368E92CA9875C9CA00A06082A8648CE3D030107A14403420004BE3D5E2505B5B207A6357147C49A915EEEACE51771C970202652D57CCB086FE9B46FFB794E0F241CA02935583D2A10A60A75675C2631863E603FB88D413284F5',
  },
  {
    name: 'basic secp384r1',
    curve: 'secp384r1',
    pkcs8:
      '3081BF020100301006072A8648CE3D020106052B810400220481A73081A40201010430D861D2C53E23ACEF61AD626FF2AF577CEBD042CB0721785AF59B76E3458C1B33E4FB10B615DE8C6B1BDF292FF58FD16EA00706052B81040022A164036200047EF8E6EBDA4153C5FE0925971EC6A1AA89A2CB5E4F9E9B21F5A9EAF634D062616E808B94EB28ACBA90A50773671C02BD509ACDBB1117E9136020611DBB93464EAD5E18158D2F05C489E605FD7629C6CC6316C600102CD755D91FA3F18627B340',
  },
];

export function buildSignTestCases(curves: Curve[]) {
  return testCases
    .filter((testCase) => curves.includes(testCase.curve))
    .map(({ name, curve, pkcs8 }) => ({
      name,
      curve,
      data: stringToBytes('example'),
      hash: 'SHA-256' as Hash,
      pkcs8: hexToBytes(pkcs8),
    }));
}

function isValidSize(val: Uint8Array, maxSize: number): boolean {
  return (
    val.length <= maxSize ||
    (val.length === maxSize + 1 && val[0] === 0x00 && val[1] >= 0x80)
  );
}

export function isValidSignature(raw: Uint8Array, curve: Curve): boolean {
  let signature: PkixEcdsaSigValue;
  try {
    signature = decodePkixEcdsaSigValue(raw);
  } catch (err) {
    return false;
  }

  const maxSize = (Number(curve.match(/[0-9]+/)?.pop()) % 7) * 8; // sloppy approach

  return (
    signature &&
    isValidSize(signature.r, maxSize) &&
    isValidSize(signature.s, maxSize)
  );
}
